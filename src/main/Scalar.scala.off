
/***************************************************************************
Representation of physical scalars by Russ Paielli <http://RussP.us>.
For documentation and user guide, see http://RussP.us/scalar-scala.htm
************************************************************************** */

package scalar_ // fast version without unit compatibility checks

import types_._
import language.implicitConversions

type Scalar = Real

val zero = 0.0
val one = 1.0

def Int (s: Scalar) = s.toInt // works only for dimensionless Scalars!
def Long(s: Scalar) = s.toLong // ditto
def Real(s: Scalar) = s.toDouble // ditto

def abs(s: Real): Real = math.abs(s)
def pow(s: Real, e: Real): Real = math.pow(s, e)
def sqrt(s: Real): Real = math.sqrt(s)
def signum(s: Real): Real = math.signum(s)
def atan2(y: Real, x: Real): Real = math.atan2(y, x)

def sin(x: Real): Real = math.sin(x)
def cos(x: Real): Real = math.cos(x)
def tan(x: Real): Real = math.tan(x)

def asin(x: Scalar): Scalar = math.asin(Real(x))
def acos(x: Scalar): Scalar = math.acos(Real(x))
def atan(x: Scalar): Scalar = math.atan(Real(x))

def min(x: Scalar*): Scalar = x.min
def max(x: Scalar*): Scalar = x.max

def min(x: Int*): Int = x.min
def max(x: Int*): Int = x.max

private var convertTo = Map[Text, Real]() // output conversion factors
private var nameToUnitMap = Map[Text, Real]() // map of names to units

def nameToUnit(name: Text) = nameToUnitMap(name)

def output_units(names: Text*) =
  println("WARNING: output_units specified with Scalar class off")

def format(numx: Real, uname: Text, fmt: Text=""): Text =

  if uname == "" then // no unit name given
    return if (fmt == "") Text(numx) else fmt.format(numx)

  val num = numx * convertTo(uname)

  val out = if (fmt != "") fmt.format(num) else
    if num % 1 == 0 then Text(num.toInt) else Text(num)

  out + " " + uname

def form(numx: Real, unit: Scalar, fmt: Text=""): Text =

  val num = Real(numx/unit)

  if fmt != "" then fmt.format(num) else
  if num % 1 == 0 then Text(num.toInt) else
  Text(num)

def base_unit(name: Text="", x: Text="", y: Text=""): Real = // new base unit
  convertTo += name -> 1
  nameToUnitMap += name -> 1
  1

def unit(name: Text, equiv: Real, x: Text="", y: Text=""): Real =
  // new derived unit
  convertTo += name -> 1/equiv
  nameToUnitMap += name -> equiv
  equiv

def utype(x: Real): Text = "unknown (Scalar class off for efficiency)"
def unitList: Text = "no units (Scalar class off for efficiency)"

implicit def ListI1(list: List[Int]): List[Real] = list map (_.toDouble)
implicit def ListI2(list: List[List[Int]]): List[List[Real]] =
    list map (ListI1(_))

implicit def VectorI1(vec: Vector[Int]): Vector[Real] = vec map (_.toDouble)
implicit def VectorI2(vec: Vector[Vector[Int]]): Vector[Vector[Real]] =
    vec map (VectorI1(_))

implicit def RealToScalar1(x: Real): Scalar1 = new Scalar1(x)
implicit def RealToScalar2(x: Real): Scalar2 = new Scalar2(x)
implicit def IntToScalar1(x: Int): Scalar1 = new Scalar1(x)
implicit def IntToScalar2(x: Int): Scalar2 = new Scalar2(x)

implicit def TextToText1(s: Text): Text1 = new Text1(s)

class Scalar1(val s: Scalar): // for "scalar * vector" multiplication
  def * (v: Vector[Scalar]): Vector[Scalar] = v * s
class Scalar2(val s: Scalar): // for "scalar * vector" multiplication
  def * (v: Vector[Int]): Vector[Scalar] = VectorI1(v) * s

class Text1(val s: String) { def form(args: Any*) = s.format(args: _*) }
