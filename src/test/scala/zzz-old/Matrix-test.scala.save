
import scalar._
import tensor._
import ATMunits._
import Matrix._

object MatrixTest {

    def main(args: Array[String]) {

        println

        val mat1 = new Matrix(3,5).initToZero
        val mat2 = new Matrix(4,2).initToZero
        var vec = new Vector(3)
        var vec2 = Vector(3*nmi, 4*nmi, 5*nmi)
        var vec3 = Vector(2*nmi, 3*nmi, 4*nmi)
        //var mat3 = 2 * mat2 // doesn't work
        mat2(0,1) = 1.5
        mat2(1,1) = 3
        mat2 *= 2
        println("mat2 = " + mat2)
        var mat3 = 2 * mat2 * 2

        val vec4 = vec2 + vec3

        mat1.initToZero
        mat2.init(1)
        mat2.negate
        vec.init(5 * nmi)
        vec += vec2

        try { mat1 + mat2 }
        catch { case ex: RuntimeException => println(
            "ERROR: inconsistent dimensions:" + mat1.dim + "and" + mat2.dim)}

        println("mat1 = " + mat1)
        println("mat2 = " + mat2)
        println("mat3 = " + mat3)
        println("vec = " + vec)
        println("vec4 = " + vec4.format("nmi"))
        println("vec/nmi = " + vec/nmi)
        println("2 * vec/nmi = " + (2 * vec/nmi))
        println("-vec/nmi = " + -vec/nmi)
        println("vec = " + vec.format("nmi"))
        println("vec = " + vec.format("nmi", "%6.3f"))
        println("zz vec = " + vec.form(nmi, "%6.3f"))
        println

        val mat9 = Matrix(row(2., 3., 4.), row(2., 3., 2.))
        val mat8 = Matrix(row(2, 3), row(1, 2), row(1, 3))

        println("mat8 = " + mat8)
        println("mat9 = " + mat9)

        val mat7 = mat9 * mat8

        assert( mat7 == Matrix(row(11, 24), row(9, 18)) )

        println("mat7 = " + mat7)

        println("mat9 = " + mat9)
        println("mat9,trans = " + mat9.trans)

        println("ID(3)(4) = " + IMatrix(3)(4))

        mat9.setDiag(7)
        println("mat9 = " + mat9)

        val mat10 = Matrix(0)(col(2., 3., 4.), col(2., 3., 2.))
        println("mat10 = " + mat10)

        var x = vec(0)
        x = 2 * nmi
        println("vec/nmi = " + vec/nmi)

        println
        }
    }
